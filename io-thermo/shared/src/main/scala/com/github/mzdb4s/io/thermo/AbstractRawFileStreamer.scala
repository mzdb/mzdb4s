package com.github.mzdb4s.io.thermo

import java.io.File

import com.github.mzdb4s.db.model.params._
import com.github.mzdb4s.db.model._
import com.github.mzdb4s.db.model.params.param._
import com.github.mzdb4s.io.mzml.MzMLMetaData
import com.github.mzdb4s.io.reader.param._
import com.github.mzdb4s.msdata.{ActivationType, SpectrumHeader}

abstract class AbstractRawFileStreamer private[thermo](rawFilePath: File) {

  require(rawFilePath.isFile, s"can't find file at '$rawFilePath'")

  protected val MS_LEVEL_ACCESSION: String = PsiMsCV.MS_LEVEL.getAccession()
  protected var _isConsumed = false

  protected val paramTreeParser: IParamTreeParser

  def getMetaDataAsXmlString(): String

  def getMetaData(): MzMLMetaData = {

    // FIXME: parse this information
    val commonInstrumentParams = CommonInstrumentParams(
      id = 1,
      paramTree = ParamTree(
        cvParams = List(
          CVParam(accession = "MS:1001742", name = "LTQ Orbitrap Velos"),
          CVParam(accession = "MS:1000529", name = "instrument serial number", value = "03359B")
        )
      )
    )

    // FIXME: parse this information
    val compListBuilder = new ComponentListBuilder()
      .addSourceComponent(ParamTree(
        cvParams = List(
          CVParam(accession = "MS:1000398", name = "nanoelectrospray"),
          CVParam(accession = "MS:1000485", name = "nanospray")
        )
      ))
      .addAnalyzerComponent(ParamTree(
        cvParams = List(
          CVParam(accession = "MS:1000484", name = "orbitrap")
        )
      ))
      .addDetectorComponent(ParamTree(
        cvParams = List(
          CVParam(accession = "MS:1000624", name = "inductive detector")
        )
      ))

    val instrumentConfigurations = Seq(
      InstrumentConfiguration(
        id = 1,
        name = "IC1",
        paramTree = null,
        componentList = compListBuilder.toComponentList(),
        softwareId = 1
      )
    )

    val processingMethods = Seq(
      ProcessingMethod(
        id = 1,
        number = 1,
        dataProcessingName = "ProteoWizard file conversion",
        paramTree = Some(ParamTree(
          cvParams = List(
            CVParam(accession = "MS:1000544", name = "Conversion to mzML")
          )
        )),
        softwareId = 1
      ),
      ProcessingMethod(
        id = 2,
        number = 2,
        dataProcessingName = "mzML to mzDB conversion",
        paramTree = Some(ParamTree(
          userParams = List(
            UserParam(name = "Conversion to mzDB", value = "", `type` = "xsd:string")
          )
        )),
        softwareId = 1
      )
    )

    // TODO: static
    //val df1 = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")

    val runs = Seq(Run(
      id = 1,
      name = "OVEMB150205_12",
      // FIXME: retrieve the correct creation date
      startTimestamp = new java.util.Date(),//df1.parse("2015-02-05T19:30:47Z"), //java.time.Instant.parse("2015-02-05T19:30:47Z"),
      paramTree = null
    ))

    val samples = Seq(Sample(id = 1, name = "UPS1 5fmol R1", paramTree = null))

    val softwareList = Seq(
      // TODO: CVParams
      Software(id = 1, name = "Xcalibur", version = "2.7.0 SP1", paramTree = null),
      Software(id = 1, name = "pwiz", version = "3.0.5759", paramTree = null),
      Software(id = 1, name = "pwiz-mzdb", version = "0.9.10", paramTree = null), // TODO: remove me when mzdb-access is updated
      Software(id = 1, name = "mzdb4s", version = "0.2.1910", paramTree = null) // TODO: retrieve from file generated by SBT
    )

    val sourceFiles = Seq(SourceFile(id = 1, name = "OVEMB150205_12.raw", location = "", paramTree = null))

    MzMLMetaData(
      commonInstrumentParams,
      instrumentConfigurations,
      processingMethods,
      runs,
      samples,
      softwareList,
      sourceFiles
    )
  }

  protected def parseSpectrumXmlMetaData(spectrumId: Int, xmlStr: String): (SpectrumXmlMetaData, String) = {

    var lineIdx = 0
    var spectrumTitle = ""
    val paramTreeCvParamsBuilder = new StringBuilder()
    val scanListBuilder = new StringBuilder()
    val precursorListBuilder = new StringBuilder()
    var curStringBuilder = paramTreeCvParamsBuilder
    var linePrefix = "  "

    for (line <- xmlStr.split('\n').toList) {
      if (lineIdx == 0) {
        spectrumTitle = line.split('"')(1)
      }
      else {
        if (line.contains("<scanList")) {
          linePrefix = null
          curStringBuilder = scanListBuilder
        }
        if (line.contains("<precursorList")) curStringBuilder = precursorListBuilder

        if (!line.contains("</spectrum>")) {
          if (linePrefix == null)
            curStringBuilder ++= line
          else
            curStringBuilder ++= s"$linePrefix$line"

          curStringBuilder += '\n'
        }
      }

      lineIdx += 1
    }

    /*println(paramTreeCvParamsBuilder.result())
    println("****")
    println(scanListBuilder.result())
    println("****")
    println(precursorListBuilder.result())*/

    val precListAsXmlStr = precursorListBuilder.result()

    val xmlMetaData = SpectrumXmlMetaData(
      spectrumId = spectrumId,
      paramTree =
        s"""<params>
           |  <cvParams>
           |$paramTreeCvParamsBuilder  </cvParams>
           |</params>
           |""".stripMargin,
      scanList = scanListBuilder.result(),
      precursorList = if (precListAsXmlStr.isEmpty) None else Some(precListAsXmlStr),
      productList = None
    )

    (xmlMetaData, spectrumTitle)
  }

  protected def getMsLevel(xmlMetaData: SpectrumXmlMetaData): Int = {
    val paramTree = this.paramTreeParser.parseParamTree(xmlMetaData.paramTree)
    val cvParams = paramTree.getCVParams()

    val defaultMsLevel = if (xmlMetaData.precursorList.isEmpty) 1 else 2
    cvParams.find(_.accession == MS_LEVEL_ACCESSION).map(_.value.toInt).getOrElse(defaultMsLevel)
  }

  protected def createSpectrum(
    id: Long,
    intitialId: Int,
    msLevel: Int,
    msCycle: Int,
    title: String,
    xmlMetaData: SpectrumXmlMetaData,
    mzList: Array[Double],
    intensityList: Array[Double]
  ): RawFileSpectrum = {

    val scanListParamTree = this.paramTreeParser.parseScanList(xmlMetaData.scanList)
    val scanStartTimeCvTerm = scanListParamTree.getScans().head.getCVParam(PsiMsCV.SCAN_START_TIME)
    val scanStartTimeUnit = scanStartTimeCvTerm.unitName.getOrElse("")
    assert(scanStartTimeUnit == "minute", s"unsupported scan time unit '$scanStartTimeUnit'")
    val scanTime = scanStartTimeCvTerm.value.toFloat * 60

    val peaksCount = mzList.length
    val intensityListAsFloats = new Array[Float](peaksCount)

    var basePeakIdx = -1
    var maxIntensity = 0f
    var intensitySum = 0f

    var i = 0
    while (i < peaksCount) {
      val intensity = intensityList(i).toFloat
      intensityListAsFloats(i) = intensity
      intensitySum += intensity

      if (intensity > maxIntensity) {
        maxIntensity = intensity
        basePeakIdx = i
      }

      i += 1
    }

    val basePeakIntensity = maxIntensity
    val basePeakMz = if (basePeakIdx > -1) mzList(basePeakIdx) else 0.0

    val header = SpectrumHeader(
      id = id,
      initialId = intitialId,
      title = title,
      cycle = msCycle,
      time = scanTime,
      msLevel = msLevel,
      activationType = Some(ActivationType.CID), // FIXME: parse activation tag from precursorList
      peaksCount = peaksCount,
      isHighResolution = true,
      tic = intensitySum,
      basePeakMz = basePeakMz,
      basePeakIntensity = basePeakIntensity,
      precursorMz = None,     // FIXME
      precursorCharge = None, // FIXME
      bbFirstSpectrumId = id,
      isolationWindow = None // FIXME: retrieve me
    )

    RawFileSpectrum(intitialId, xmlMetaData, header, mzList, intensityListAsFloats)
  }

}

case class RawFileSpectrum(
  initialId: Int,
  xmlMetaData: SpectrumXmlMetaData,
  header: SpectrumHeader,
  mzList: Array[Double],
  intensityList: Array[Float]
)
